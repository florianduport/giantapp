!function($) {
  /**
   * @param {?} options
   * @return {undefined}
   */
  $.slidebars = function(options) {
    /**
     * @return {undefined}
     */
    function initialise() {
      if (!settings.disableOver || "number" == typeof settings.disableOver && settings.disableOver >= windowWidth) {
        /** @type {boolean} */
        enabled = true;
        $("html").addClass("sb-init");
        if (settings.hideControlClasses) {
          $delegate.removeClass("sb-hide");
        }
        init();
      } else {
        if ("number" == typeof settings.disableOver) {
          if (settings.disableOver < windowWidth) {
            /** @type {boolean} */
            enabled = false;
            $("html").removeClass("sb-init");
            if (settings.hideControlClasses) {
              $delegate.addClass("sb-hide");
            }
            $body.css("minHeight", "");
            if (program || inverse) {
              close();
            }
          }
        }
      }
    }
    /**
     * @return {undefined}
     */
    function init() {
      $body.css("minHeight", "");
      $body.css("minHeight", $("html").height() + "px");
      if (element) {
        if (element.hasClass("sb-width-custom")) {
          element.css("width", element.attr("data-sb-width"));
        }
      }
      if (el) {
        if (el.hasClass("sb-width-custom")) {
          el.css("width", el.attr("data-sb-width"));
        }
      }
      if (element) {
        if (element.hasClass("sb-style-push") || element.hasClass("sb-style-overlay")) {
          element.css("marginLeft", "-" + element.css("width"));
        }
      }
      if (el) {
        if (el.hasClass("sb-style-push") || el.hasClass("sb-style-overlay")) {
          el.css("marginRight", "-" + el.css("width"));
        }
      }
      if (settings.scrollLock) {
        $("html").addClass("sb-scroll-lock");
      }
    }
    /**
     * @param {Object} el
     * @param {string} value
     * @param {string} prop
     * @return {undefined}
     */
    function animate(el, value, prop) {
      var that;
      if (that = el.hasClass("sb-style-push") ? $body.add(el).add($html) : el.hasClass("sb-style-overlay") ? el : $body.add($html), "translate" === animation) {
        that.css("transform", "translate(" + value + ")");
      } else {
        if ("side" === animation) {
          if ("-" === value[0]) {
            value = value.substr(1);
          }
          if ("0px" !== value) {
            that.css(prop, "0px");
          }
          setTimeout(function() {
            that.css(prop, value);
          }, 1);
        } else {
          if ("jQuery" === animation) {
            if ("-" === value[0]) {
              value = value.substr(1);
            }
            var anim = {};
            /** @type {string} */
            anim[prop] = value;
            that.stop().animate(anim, 400);
          }
        }
      }
      setTimeout(function() {
        if ("0px" === value) {
          that.removeAttr("style");
          init();
        }
      }, 400);
    }
    /**
     * @param {string} title
     * @return {undefined}
     */
    function open(title) {
      /**
       * @return {undefined}
       */
      function proceed() {
        if (enabled && ("left" === title && element)) {
          $("html").addClass("sb-active sb-active-left");
          element.addClass("sb-active");
          animate(element, element.css("width"), "left");
          setTimeout(function() {
            /** @type {boolean} */
            program = true;
          }, 400);
        } else {
          if (enabled) {
            if ("right" === title) {
              if (el) {
                $("html").addClass("sb-active sb-active-right");
                el.addClass("sb-active");
                animate(el, "-" + el.css("width"), "right");
                setTimeout(function() {
                  /** @type {boolean} */
                  inverse = true;
                }, 400);
              }
            }
          }
        }
      }
      if ("left" === title && (element && inverse) || "right" === title && (el && program)) {
        close();
        setTimeout(proceed, 400);
      } else {
        proceed();
      }
    }
    /**
     * @param {?} callback
     * @return {undefined}
     */
    function close(callback) {
      if (program || inverse) {
        if (program) {
          animate(element, "0px", "left");
          /** @type {boolean} */
          program = false;
        }
        if (inverse) {
          animate(el, "0px", "right");
          /** @type {boolean} */
          inverse = false;
        }
        setTimeout(function() {
          $("html").removeClass("sb-active sb-active-left sb-active-right");
          if (element) {
            element.removeClass("sb-active");
          }
          if (el) {
            el.removeClass("sb-active");
          }
          if ("undefined" != typeof callback) {
            window.location = callback;
          }
        }, 400);
      }
    }
    /**
     * @param {string} alignment
     * @return {undefined}
     */
    function toggle(alignment) {
      if ("left" === alignment) {
        if (element) {
          if (program) {
            close();
          } else {
            open("left");
          }
        }
      }
      if ("right" === alignment) {
        if (el) {
          if (inverse) {
            close();
          } else {
            open("right");
          }
        }
      }
    }
    /**
     * @param {Event} e
     * @param {Entity} event
     * @return {undefined}
     */
    function eventHandler(e, event) {
      e.stopPropagation();
      e.preventDefault();
      if ("touchend" === e.type) {
        event.off("click");
      }
    }
    var settings = $.extend({
      siteClose : true,
      scrollLock : false,
      disableOver : false,
      hideControlClasses : false
    }, options);
    /** @type {(CSSStyleDeclaration|null)} */
    var style = document.createElement("div").style;
    /** @type {boolean} */
    var a = false;
    /** @type {boolean} */
    var b = false;
    if ("" === style.MozTransition || ("" === style.WebkitTransition || ("" === style.OTransition || "" === style.transition))) {
      /** @type {boolean} */
      a = true;
    }
    if ("" === style.MozTransform || ("" === style.WebkitTransform || ("" === style.OTransform || "" === style.transform))) {
      /** @type {boolean} */
      b = true;
    }
    /** @type {string} */
    var agent = navigator.userAgent;
    /** @type {boolean} */
    var resampleWidth = false;
    /** @type {boolean} */
    var resampleHeight = false;
    if (/Android/.test(agent)) {
      /** @type {string} */
      resampleWidth = agent.substr(agent.indexOf("Android") + 8, 3);
    } else {
      if (/(iPhone|iPod|iPad)/.test(agent)) {
        /** @type {string} */
        resampleHeight = agent.substr(agent.indexOf("OS ") + 3, 3).replace("_", ".");
      }
    }
    if (resampleWidth && 3 > resampleWidth || resampleHeight && 5 > resampleHeight) {
      $("html").addClass("sb-static");
    }
    var $body = $("#sb-site, .sb-site-container");
    if ($(".sb-left").length) {
      var element = $(".sb-left");
      /** @type {boolean} */
      var program = false;
    }
    if ($(".sb-right").length) {
      var el = $(".sb-right");
      /** @type {boolean} */
      var inverse = false;
    }
    /** @type {boolean} */
    var enabled = false;
    var windowWidth = $(window).width();
    var $delegate = $(".sb-toggle-left, .sb-toggle-right, .sb-open-left, .sb-open-right, .sb-close");
    var $html = $(".sb-slide");
    initialise();
    $(window).resize(function() {
      var windowWidthNew = $(window).width();
      if (windowWidth !== windowWidthNew) {
        windowWidth = windowWidthNew;
        initialise();
        if (program) {
          open("left");
        }
        if (inverse) {
          open("right");
        }
      }
    });
    var animation;
    if (a && b) {
      /** @type {string} */
      animation = "translate";
      if (resampleWidth) {
        if (4.4 > resampleWidth) {
          /** @type {string} */
          animation = "side";
        }
      }
    } else {
      /** @type {string} */
      animation = "jQuery";
    }
    this.slidebars = {
      /** @type {function (string): undefined} */
      open : open,
      /** @type {function (?): undefined} */
      close : close,
      /** @type {function (string): undefined} */
      toggle : toggle,
      /**
       * @return {?}
       */
      init : function() {
        return enabled;
      },
      /**
       * @param {string} alignment
       * @return {?}
       */
      active : function(alignment) {
        return "left" === alignment && element ? program : "right" === alignment && el ? inverse : void 0;
      },
      /**
       * @param {string} alignment
       * @return {undefined}
       */
      destroy : function(alignment) {
        if ("left" === alignment) {
          if (element) {
            if (program) {
              close();
            }
            setTimeout(function() {
              element.remove();
              /** @type {boolean} */
              element = false;
            }, 400);
          }
        }
        if ("right" === alignment) {
          if (el) {
            if (inverse) {
              close();
            }
            setTimeout(function() {
              el.remove();
              /** @type {boolean} */
              el = false;
            }, 400);
          }
        }
      }
    };
    $(".sb-toggle-left").on("touchend click", function(e) {
      eventHandler(e, $(this));
      toggle("left");
    });
    $(".sb-toggle-right").on("touchend click", function(e) {
      eventHandler(e, $(this));
      toggle("right");
    });
    $(".sb-open-left").on("touchend click", function(e) {
      eventHandler(e, $(this));
      open("left");
    });
    $(".sb-open-right").on("touchend click", function(e) {
      eventHandler(e, $(this));
      open("right");
    });
    $(".sb-close").on("touchend click", function(e) {
      if ($(this).is("a") || $(this).children().is("a")) {
        if ("click" === e.type) {
          e.preventDefault();
          var restoreScript = $(this).is("a") ? $(this).attr("href") : $(this).find("a").attr("href");
          close(restoreScript);
        }
      } else {
        eventHandler(e, $(this));
        close();
      }
    });
    $body.on("touchend click", function(e) {
      if (settings.siteClose) {
        if (program || inverse) {
          eventHandler(e, $(this));
          close();
        }
      }
    });
  };
}(jQuery);
